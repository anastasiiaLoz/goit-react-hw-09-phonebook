{"version":3,"sources":["pages/LoginPage.js","redux/auth/authOperations.js"],"names":["schema","Yup","shape","email","required","password","min","mapDispatch","login","connect","withRouter","className","initialValues","validationSchema","onSubmit","method","action","htmlFor","type","name","component","to","API_KEY","register","user","dispatch","a","registerRequest","axios","post","returnSecureToken","data","registerSuccess","registerError","response","error","message","loginRequest","loginSuccess","loginError"],"mappings":"gJAAA,wEAOMA,EAASC,MAAaC,MAAM,CAChCC,MAAOF,MACJG,SAAS,qBACTD,MAAM,2BACTE,SAAUJ,MACPG,SAAS,qBACTE,IAAI,KAuEHC,EAAc,CAClBC,WAGaC,sBACb,KACAF,EAFaE,CAGbC,aA3EgB,SAAC,GAAe,IAAbF,EAAY,EAAZA,MACnB,OACE,sBAAKG,UAAU,oEAAf,UACE,8BACE,mBAAGA,UAAU,qBAAb,uCAGF,cAAC,IAAD,CACEC,cAAe,CACbT,MAAO,GACPE,SAAU,IAEZQ,iBAAkBb,EAClBc,SAAUN,EANZ,SAQE,sBAAKG,UAAU,QAAf,UACE,eAAC,IAAD,CAAMA,UAAU,gBAAgBI,OAAO,OAAOC,OAAO,IAArD,UACE,sBAAKL,UAAU,gCAAf,UACE,uBAAOA,UAAU,kDAAkDM,QAAQ,QAA3E,mBAGA,cAAC,IAAD,CACEC,KAAK,OACLC,KAAK,QACLR,UAAU,qJAEZ,cAAC,IAAD,CAAcQ,KAAK,QAAQC,UAAU,SAEvC,sBAAKT,UAAU,gCAAf,UACE,uBAAOA,UAAU,kDAAkDM,QAAQ,WAA3E,sBAGA,cAAC,IAAD,CACEC,KAAK,WACLC,KAAK,WACLR,UAAU,qJAEZ,cAAC,IAAD,CAAcQ,KAAK,WAAWC,UAAU,SAE1C,qBAAKT,UAAU,mBAAf,SACE,cAAC,IAAD,CACEA,UAAU,qEACVU,GAAG,8CAFL,qCAOF,wBACEV,UAAU,wHACVO,KAAK,SAFP,uBAOF,qBAAKP,UAAU,0CAAf,SACE,oBAAGA,UAAU,aAAb,mCACyB,IACvB,cAAC,IAAD,CAAMA,UAAU,4BAA4BU,GAAG,YAA/C,wC,kKCrERC,EAAU,0CAEHC,EAAW,SAAAC,GAAI,8CAAI,WAAMC,GAAN,iBAAAC,EAAA,6DAC9BD,EAASE,eADqB,kBAGLC,IAAMC,KAAN,wEAA4EP,GAA5E,2BAClBE,GADkB,IAErBM,mBAAmB,KALO,gBAGpBC,EAHoB,EAGpBA,KAIRN,EAASO,YAAgBD,IAPG,gDAS5BN,EAASQ,YAAc,KAAMC,SAASH,KAAKI,MAAMC,UATrB,yDAAJ,uDAaf5B,EAAQ,SAAAgB,GAAI,8CAAI,WAAMC,GAAN,iBAAAC,EAAA,6DAC3BD,EAASY,eADkB,kBAGFT,IAAMC,KAAN,oFAAwFP,GAAxF,2BAClBE,GADkB,IAErBM,mBAAmB,KALI,gBAGjBC,EAHiB,EAGjBA,KAIRN,EAASa,YAAaP,IAPG,gDASzBN,EAASc,YAAW,KAAML,SAASH,KAAKI,MAAMC,UATrB,yDAAJ","file":"static/js/LoginPage.2bf7bacc.chunk.js","sourcesContent":["import React from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../redux/auth/authOperations\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nconst schema = Yup.object().shape({\n  email: Yup.string()\n    .required(\"Field is required\")\n    .email(\"Email must contain '@'!\"),\n  password: Yup.string()\n    .required(\"Field is required\")\n    .min(4)\n});\n\nconst LoginPage = ({ login }) => {\n  return (\n    <div className=\"bg-white max-w-lg mx-auto p-8 md:p-12 my-10 rounded-lg shadow-2xl\">\n      <div>\n        <p className=\"text-gray-600 pt-2\">Log in to your account.</p>\n      </div>\n\n      <Formik\n        initialValues={{\n          email: \"\",\n          password: \"\"\n        }}\n        validationSchema={schema}\n        onSubmit={login}\n      >\n        <div className=\"mt-10\">\n          <Form className=\"flex flex-col\" method=\"POST\" action=\"#\">\n            <div className=\"mb-6 pt-3 rounded bg-gray-200\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2 ml-3\" htmlFor=\"email\">\n                Email\n              </label>\n              <Field\n                type=\"text\"\n                name=\"email\"\n                className=\"bg-gray-200 rounded w-full text-gray-700 focus:outline-none border-b-4 border-gray-300 focus:border-purple-600 transition duration-500 px-3 pb-3\"\n              />\n              <ErrorMessage name=\"email\" component=\"p\" />\n            </div>\n            <div className=\"mb-6 pt-3 rounded bg-gray-200\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2 ml-3\" htmlFor=\"password\">\n                Password\n              </label>\n              <Field\n                type=\"password\"\n                name=\"password\"\n                className=\"bg-gray-200 rounded w-full text-gray-700 focus:outline-none border-b-4 border-gray-300 focus:border-purple-600 transition duration-500 px-3 pb-3\"\n              />\n              <ErrorMessage name=\"password\" component=\"p\" />\n            </div>\n            <div className=\"flex justify-end\">\n              <Link\n                className=\"text-sm text-purple-600 hover:text-purple-700 hover:underline mb-6\"\n                to=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n              >\n                Forgot your password?\n              </Link>\n            </div>\n            <button\n              className=\"bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 rounded shadow-lg hover:shadow-xl transition duration-200\"\n              type=\"submit\"\n            >\n              Log In\n            </button>\n          </Form>\n          <div className=\"max-w-lg mx-auto text-center mt-12 mb-6\">\n            <p className=\"text-white\">\n              Don't have an account?{\" \"}\n              <Link className=\"font-bold hover:underline\" to=\"/register\">\n                Register\n              </Link>\n            </p>\n          </div>\n        </div>\n      </Formik>\n    </div>\n  );\n};\n\nconst mapDispatch = {\n  login\n};\n\nexport default connect(\n  null,\n  mapDispatch\n)(withRouter(LoginPage));\n","import axios from \"axios\";\nimport { loginError, loginSuccess, registerError, registerRequest, registerSuccess, loginRequest } from \"./authActions\";\n\n// const API_KEY = process.env.REACT_APP_API_KEY;\nconst API_KEY = \"AIzaSyCuBVG9woxvOVJflwnDKGuzJwOkEVviJZg\";\n\nexport const register = user => async dispatch => {\n  dispatch(registerRequest());\n  try {\n    const { data } = await axios.post(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${API_KEY}`, {\n      ...user,\n      returnSecureToken: true\n    });\n    dispatch(registerSuccess(data));\n  } catch (error) {\n    dispatch(registerError(error.response.data.error.message));\n  }\n};\n\nexport const login = user => async dispatch => {\n  dispatch(loginRequest());\n  try {\n    const { data } = await axios.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${API_KEY}`, {\n      ...user,\n      returnSecureToken: true\n    });\n    dispatch(loginSuccess(data));\n  } catch (error) {\n    dispatch(loginError(error.response.data.error.message));\n  }\n};\n"],"sourceRoot":""}