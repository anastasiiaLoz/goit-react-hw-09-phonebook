{"version":3,"sources":["pages/RegisterPage.js","redux/auth/authOperations.js"],"names":["schema","Yup","shape","email","required","password","matches","confirmPassword","oneOf","mapDispatch","register","connect","className","initialValues","validationSchema","onSubmit","method","action","type","name","component","to","API_KEY","user","dispatch","a","registerRequest","axios","post","returnSecureToken","data","registerSuccess","registerError","response","error","message","login","loginRequest","loginSuccess","loginError"],"mappings":"gJAAA,iEASMA,EAASC,MAAaC,MAAM,CAChCC,MAAOF,MACJG,WACAD,QACHE,SAAUJ,MACPG,WACAE,QARoB,yFAUnB,uHAEJC,gBAAiBN,MACdG,WACAI,MAAM,CAACP,IAAQ,YAAa,MAAO,2BAqElCQ,EAAc,CAClBC,cAGaC,sBACb,KACAF,EAFaE,EAtEM,SAAC,GAAkB,IAAhBD,EAAe,EAAfA,SACtB,OACE,sBAAKE,UAAU,oEAAf,UACE,gCACE,oBAAIA,UAAU,qBAAd,gCACA,mBAAGA,UAAU,qBAAb,wCAGF,cAAC,IAAD,CACEC,cAAe,CACbV,MAAO,GACPE,SAAU,GACVE,gBAAiB,IAEnBO,iBAAkBd,EAClBe,SAAUL,EAPZ,SASE,sBAAKE,UAAU,QAAf,UACE,eAAC,IAAD,CAAMA,UAAU,gBAAgBI,OAAO,OAAOC,OAAO,IAArD,UACE,sBAAKL,UAAU,gCAAf,UACE,uBAAOA,UAAU,kDAAjB,mBACA,cAAC,IAAD,CACEM,KAAK,OACLC,KAAK,QACLP,UAAU,qJAEZ,cAAC,IAAD,CAAcO,KAAK,QAAQC,UAAU,SAEvC,sBAAKR,UAAU,gCAAf,UACE,uBAAOA,UAAU,kDAAjB,sBACA,cAAC,IAAD,CACEM,KAAK,WACLC,KAAK,WACLP,UAAU,qJAEZ,cAAC,IAAD,CAAcO,KAAK,WAAWC,UAAU,SAE1C,sBAAKR,UAAU,gCAAf,UACE,uBAAOA,UAAU,kDAAjB,8BACA,cAAC,IAAD,CACEM,KAAK,OACLC,KAAK,kBACLP,UAAU,qJAEZ,cAAC,IAAD,CAAcO,KAAK,kBAAkBC,UAAU,SAGjD,wBACER,UAAU,wHACVM,KAAK,SAFP,iCAQF,qBAAKN,UAAU,qDAAf,SACE,cAAC,IAAD,CAAMA,UAAU,4BAA4BS,GAAG,SAA/C,2D,kKC5ENC,EAAU,0CAEHZ,EAAW,SAAAa,GAAI,8CAAI,WAAMC,GAAN,iBAAAC,EAAA,6DAC9BD,EAASE,eADqB,kBAGLC,IAAMC,KAAN,wEAA4EN,GAA5E,2BAClBC,GADkB,IAErBM,mBAAmB,KALO,gBAGpBC,EAHoB,EAGpBA,KAIRN,EAASO,YAAgBD,IAPG,gDAS5BN,EAASQ,YAAc,KAAMC,SAASH,KAAKI,MAAMC,UATrB,yDAAJ,uDAafC,EAAQ,SAAAb,GAAI,8CAAI,WAAMC,GAAN,iBAAAC,EAAA,6DAC3BD,EAASa,eADkB,kBAGFV,IAAMC,KAAN,oFAAwFN,GAAxF,2BAClBC,GADkB,IAErBM,mBAAmB,KALI,gBAGjBC,EAHiB,EAGjBA,KAIRN,EAASc,YAAaR,IAPG,gDASzBN,EAASe,YAAW,KAAMN,SAASH,KAAKI,MAAMC,UATrB,yDAAJ","file":"static/js/RegisterPage.808ba091.chunk.js","sourcesContent":["import React from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { register } from \"../redux/auth/authOperations\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nconst isStrongPassword = /^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})/;\n\nconst schema = Yup.object().shape({\n  email: Yup.string()\n    .required()\n    .email(),\n  password: Yup.string()\n    .required()\n    .matches(\n      isStrongPassword,\n      \"Password must be longer than 8 characters, must contain at least 1 capital letter, 1 number and 1 special character\"\n    ),\n  confirmPassword: Yup.string()\n    .required()\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match!\")\n});\n\nconst RegisterPage = ({ register }) => {\n  return (\n    <div className=\"bg-white max-w-lg mx-auto p-8 md:p-12 my-10 rounded-lg shadow-2xl\">\n      <div>\n        <h3 className=\"font-bold text-2xl\">Welcome to Startup</h3>\n        <p className=\"text-gray-600 pt-2\">Log in to your account.</p>\n      </div>\n\n      <Formik\n        initialValues={{\n          email: \"\",\n          password: \"\",\n          confirmPassword: \"\"\n        }}\n        validationSchema={schema}\n        onSubmit={register}\n      >\n        <div className=\"mt-10\">\n          <Form className=\"flex flex-col\" method=\"POST\" action=\"#\">\n            <div className=\"mb-6 pt-3 rounded bg-gray-200\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2 ml-3\">Email</label>\n              <Field\n                type=\"text\"\n                name=\"email\"\n                className=\"bg-gray-200 rounded w-full text-gray-700 focus:outline-none border-b-4 border-gray-300 focus:border-purple-600 transition duration-500 px-3 pb-3\"\n              />\n              <ErrorMessage name=\"email\" component=\"p\" />\n            </div>\n            <div className=\"mb-6 pt-3 rounded bg-gray-200\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2 ml-3\">Password</label>\n              <Field\n                type=\"password\"\n                name=\"password\"\n                className=\"bg-gray-200 rounded w-full text-gray-700 focus:outline-none border-b-4 border-gray-300 focus:border-purple-600 transition duration-500 px-3 pb-3\"\n              />\n              <ErrorMessage name=\"password\" component=\"p\" />\n            </div>\n            <div className=\"mb-6 pt-3 rounded bg-gray-200\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2 ml-3\">Confirm Password</label>\n              <Field\n                type=\"text\"\n                name=\"confirmPassword\"\n                className=\"bg-gray-200 rounded w-full text-gray-700 focus:outline-none border-b-4 border-gray-300 focus:border-purple-600 transition duration-500 px-3 pb-3\"\n              />\n              <ErrorMessage name=\"confirmPassword\" component=\"p\" />\n            </div>\n\n            <button\n              className=\"bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 rounded shadow-lg hover:shadow-xl transition duration-200\"\n              type=\"submit\"\n            >\n              Register Account\n            </button>\n          </Form>\n\n          <div className=\"max-w-lg mx-auto text-white text-center mt-12 mb-6\">\n            <Link className=\"font-bold hover:underline\" to=\"/login\">\n              Already have an account? Login!\n            </Link>\n          </div>\n        </div>\n      </Formik>\n    </div>\n  );\n};\n\nconst mapDispatch = {\n  register\n};\n\nexport default connect(\n  null,\n  mapDispatch\n)(RegisterPage);\n\n// <div className=\"mb-6 pt-3 rounded bg-gray-200\">\n//               <label className=\"block text-gray-700 text-sm font-bold mb-2 ml-3\">First Name</label>\n//               <Field\n//                 type=\"text\"\n//                 name=\"email\"\n//                 className=\"bg-gray-200 rounded w-full text-gray-700 focus:outline-none border-b-4 border-gray-300 focus:border-purple-600 transition duration-500 px-3 pb-3\"\n//               />\n//               <ErrorMessage name=\"email\" component=\"p\" />\n//             </div>\n//             <div className=\"mb-6 pt-3 rounded bg-gray-200\">\n//               <label className=\"block text-gray-700 text-sm font-bold mb-2 ml-3\">Last Name</label>\n//               <Field\n//                 type=\"text\"\n//                 name=\"lastName\"\n//                 className=\"bg-gray-200 rounded w-full text-gray-700 focus:outline-none border-b-4 border-gray-300 focus:border-purple-600 transition duration-500 px-3 pb-3\"\n//               />\n//               <ErrorMessage name=\"lastName\" component=\"p\" />\n//             </div>\n","import axios from \"axios\";\nimport { loginError, loginSuccess, registerError, registerRequest, registerSuccess, loginRequest } from \"./authActions\";\n\n// const API_KEY = process.env.REACT_APP_API_KEY;\nconst API_KEY = \"AIzaSyCuBVG9woxvOVJflwnDKGuzJwOkEVviJZg\";\n\nexport const register = user => async dispatch => {\n  dispatch(registerRequest());\n  try {\n    const { data } = await axios.post(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${API_KEY}`, {\n      ...user,\n      returnSecureToken: true\n    });\n    dispatch(registerSuccess(data));\n  } catch (error) {\n    dispatch(registerError(error.response.data.error.message));\n  }\n};\n\nexport const login = user => async dispatch => {\n  dispatch(loginRequest());\n  try {\n    const { data } = await axios.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${API_KEY}`, {\n      ...user,\n      returnSecureToken: true\n    });\n    dispatch(loginSuccess(data));\n  } catch (error) {\n    dispatch(loginError(error.response.data.error.message));\n  }\n};\n"],"sourceRoot":""}