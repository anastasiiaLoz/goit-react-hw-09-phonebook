{"version":3,"sources":["Components/contactsForm/StyledContactsForm.js","redux/contacts/operations.js","redux/contacts/selectors.js","Components/contactsForm/ContactsForm.js","Components/contactsList/StyledContactsList.js","Components/contactsList/ContactsList.js","Components/contactsSection/ContactsSection.js","Components/contactsFilter/StyledContactsFilter.js","Components/contactsFilter/ContactsFilter.js","Phonebook.js","pages/PhonebookPage.js"],"names":["StyledContactsForm","styled","form","addContactOperation","contact","dispatch","getState","a","axios","post","data","addContact","id","name","deleteContactOperation","delete","deleteContact","getContactsSelector","state","contacts","items","contactsFilter","filter","getFilteredContacts","createSelector","toLowerCase","includes","initialState","number","ContactsForm","useSelector","useState","setState","useDispatch","onHandleChange","e","target","value","prev","onSubmit","preventDefault","some","alert","placeholder","type","pattern","title","required","onChange","StyledContactsList","div","ContactsList","map","className","onClick","ContactsSection","children","styles","StyledFilterContainer","ContactsFilter","event","filterContacts","Contacts","props","setFilter","console","log","this","getAllContactsOperation","onCheckDuplicateName","Component","mapDispatchToProps","get","Object","keys","key","getAllContacts","connect","Contactspage","Phonebook"],"mappings":"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","file":"static/js/PhonebookPage.f4fd7540.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const StyledContactsForm = styled.form`\n    width:400px;\n    height: 250px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: flex-start;\n    border-color: black;\n    padding: 15px;\n    border-radius: 2px;\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%);\n    margin-bottom: 50px;\n    \ninput {\n    width: 100%;\n  padding: 12px 10px;\n  margin: 8px 0;\n  display: inline-block;\n  border-radius: 4px;\n  box-sizing: border-box;\n  border: 1px solid #ccc8c8;\n  transition: .3s border-color;\n    &:hover {\n  border: 1px solid #0f55eb;\n}\n}\ninput::placeholder {\n  color: rgba(0, 26, 255, 0.336);\n  font-size: 1em;\n  font-style: italic;\n}\n`","import axios from \"axios\";\nimport { addContact, deleteContact, getAllContacts } from \"../contacts/actions\";\n\nconst addContactOperation = contact => async (dispatch, getState) => {\n  try {\n    const { data } = await axios.post(`https://bootycall-phonebook-default-rtdb.firebaseio.com/contacts.json`, contact);\n    dispatch(addContact({ ...contact, id: data.name }));\n  } catch (error) {}\n};\n\nconst deleteContactOperation = id => async dispatch => {\n  try {\n    await axios.delete(`https://bootycall-phonebook-default-rtdb.firebaseio.com/contacts/${id}.json`);\n    dispatch(deleteContact(id));\n  } catch (error) {}\n};\n\nconst getAllContactsOperation = contacts => async dispatch => {\n  try {\n    const { data } = await axios.get(`https://bootycall-phonebook-default-rtdb.firebaseio.com/contacts.json`);\n    if (data) {\n      const contacts = Object.keys(data).map(key => ({ id: key, ...data[key] }));\n      dispatch(getAllContacts(contacts));\n    }\n  } catch (error) {}\n};\n\nexport { addContactOperation, deleteContactOperation, getAllContactsOperation };\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getContactsSelector = state => state.contacts.items;\nconst contactsFilter = state => state.contacts.filter;\n\nconst getFilteredContacts = createSelector(\n  [getContactsSelector, contactsFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n  }\n);\n\nexport { getFilteredContacts, getContactsSelector, contactsFilter };\n","import { StyledContactsForm } from \"./StyledContactsForm.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContactOperation } from \"../../redux/contacts/operations\";\nimport { getContactsSelector } from \"../../redux/contacts/selectors\";\n\nconst initialState = {\n  contacts: [],\n  name: \"\",\n  filter: \"\",\n  number: \"\"\n};\n\nexport default function ContactsForm() {\n  const contacts = useSelector(getContactsSelector);\n  const [state, setState] = useState(initialState);\n  const dispatch = useDispatch();\n\n  const onCheckDuplicateName = name => {\n    return contacts.some(contact => contact.name === name);\n  };\n\n  const onHandleSubmit = e => {\n    e.preventDefault();\n    if (onCheckDuplicateName(state.name)) {\n      alert(`${state.name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContactOperation(state));\n    setState(initialState);\n  };\n\n  const onHandleChange = e => {\n    const { name, value } = e.target;\n    setState(prev => ({ ...prev, [name]: value }));\n  };\n\n  return (\n    <StyledContactsForm onSubmit={onHandleSubmit}>\n      <label>\n        Name\n        <input\n          placeholder=\"what's his/her name?\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={onHandleChange}\n          value={state.name}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          placeholder=\"gimme their number, hun;)\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={onHandleChange}\n          value={state.number}\n        />\n      </label>\n      <button type=\"submit\">Add Contact</button>\n    </StyledContactsForm>\n  );\n}\n","import styled from \"styled-components\"\n\nexport const StyledContactsList = styled.div`\n    width:400px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: flex-start;\n    border-color: black;\n    padding: 15px;\n    border-radius: 2px;\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%);\n    margin-top: 50px;\n\n.styled-contact-li{\n    display:flex;\n    align-items: center;\n    justify-content: space-between;\n}\n`","import React from \"react\";\nimport { StyledContactsList } from \"./StyledContactsList\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteContactOperation } from \"../../redux/contacts/operations\";\nimport { getFilteredContacts } from \"../../redux/contacts/selectors\";\n\nexport default function ContactsList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getFilteredContacts);\n\n  const deleteContact = async e => {\n    const { id } = e.target;\n    dispatch(deleteContactOperation(id));\n  };\n\n  return (\n    <StyledContactsList>\n      <ul>\n        {contacts.map(contact => (\n          <li className=\"styled-contact-li\" key={contact.id}>\n            <p>{contact.name}:</p>\n            <p>{contact.number}</p>\n            <button type=\"button\" onClick={deleteContact} id={contact.id}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </StyledContactsList>\n  );\n}\n","import React from \"react\";\n\nconst ContactsSection = ({ title, children, styles }) => {\n  return (\n    <div className={styles}>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n};\n\nexport default ContactsSection;\n","import styled from 'styled-components'\n\nexport const StyledFilterContainer = styled.div`\n    width:400px;\n    height: 150px;\n    padding: 15px;\n    border-radius: 2px;\n    &:hover{\n        border: 1px solid #0f55eb;\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%);\n    background-color: rgba(0, 26, 255, 0.336);\n    }\n\ninput {\n    width: 100%;\n  padding: 12px 10px;\n  margin: 8px 0;\n  display: inline-block;\n  border-radius: 4px;\n  box-sizing: border-box;\n  border: 1px solid #ccc8c8;\n  transition: .3s border-color;\n  \n   \n}\ninput::placeholder {\n  color: rgba(0, 26, 255, 0.336);\n  font-size: 1em;\n  font-style: italic;\n}\n`","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { filterContacts } from \"../../redux/contacts/actions\";\nimport { contactsFilter } from \"../../redux/contacts/selectors\";\nimport { StyledFilterContainer } from \"./StyledContactsFilter\";\n\nexport default function ContactsFilter() {\n  const filter = useSelector(contactsFilter);\n  const dispatch = useDispatch();\n  const setFilter = event => {\n    dispatch(filterContacts(event.target.value));\n  };\n\n  return (\n    <StyledFilterContainer>\n      <label>\n        <h3>Find contacts by name</h3>\n        <input\n          className=\"filterInput\"\n          type=\"text\"\n          value={filter}\n          onChange={setFilter}\n          placeholder=\"who is your booty call for tonight? \"\n        />\n      </label>\n    </StyledFilterContainer>\n  );\n}\n","import React, { Component } from \"react\";\nimport ContactsForm from \"./Components/contactsForm/ContactsForm\";\nimport ContactsList from \"./Components/contactsList/ContactsList\";\nimport ContactsSection from \"./Components/contactsSection/ContactsSection\";\nimport ContactsFilter from \"./Components/contactsFilter/ContactsFilter\";\nimport { connect } from \"react-redux\";\nimport { filterContacts } from \"./redux/contacts/actions\";\nimport { getFilteredContacts, contactsFilter } from \"./redux/contacts/selectors\";\nimport { addContactOperation, deleteContactOperation, getAllContactsOperation } from \"./redux/contacts/operations\";\n\nclass Contacts extends Component {\n  async componentDidMount() {\n    this.props.getAllContactsOperation();\n  }\n\n  addContact = async contact => {\n    this.props.addContactOperation(contact);\n  };\n\n  setFilter = e => {\n    const { value } = e.target;\n    console.log(value);\n    this.props.filterContacts(value);\n  };\n\n  render() {\n    return (\n      <>\n        <ContactsSection title=\"Phonebook\">\n          <ContactsForm addContact={this.addContact} onCheckDuplicateName={this.onCheckDuplicateName} />\n        </ContactsSection>\n\n        <ContactsSection title=\"Contacts\" styles=\"filterContainerStyle\">\n          <ContactsFilter filter={this.props.filter} setFilter={this.setFilter} />\n        </ContactsSection>\n\n        <ContactsSection>\n          <ContactsList contacts={this.props.contacts} deleteContact={this.deleteContact} />\n        </ContactsSection>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: getFilteredContacts(state),\n  filter: contactsFilter(state)\n});\n\nconst mapDispatchToProps = {\n  addContactOperation,\n  deleteContactOperation,\n  getAllContactsOperation,\n  filterContacts\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Contacts);\n","import React, { Component } from \"react\";\nimport Phonebook from \"../Phonebook\";\n\nclass Contactspage extends Component {\n  render() {\n    return <Phonebook />;\n  }\n}\n\nexport default Contactspage;\n"],"sourceRoot":""}